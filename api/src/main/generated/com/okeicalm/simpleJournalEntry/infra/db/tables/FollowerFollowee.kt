/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.infra.db.tables

import com.okeicalm.simpleJournalEntry.infra.db.SimpleJournalEntryDb
import com.okeicalm.simpleJournalEntry.infra.db.keys.FOLLOWEE_ACCOUNTS_ID_FK
import com.okeicalm.simpleJournalEntry.infra.db.keys.FOLLOWER_ACCOUNTS_ID_FK
import com.okeicalm.simpleJournalEntry.infra.db.keys.KEY_FOLLOWER_FOLLOWEE_FOLLOWER_FOLLOWEE_ID_UINDEX
import com.okeicalm.simpleJournalEntry.infra.db.keys.KEY_FOLLOWER_FOLLOWEE_PRIMARY
import com.okeicalm.simpleJournalEntry.infra.db.tables.records.FollowerFolloweeRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FollowerFollowee(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, FollowerFolloweeRecord>?,
    aliased: Table<FollowerFolloweeRecord>?,
    parameters: Array<Field<*>?>?
) : TableImpl<FollowerFolloweeRecord>(
    alias,
    SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>simple_journal_entry_db.follower_followee</code>
         */
        val FOLLOWER_FOLLOWEE: FollowerFollowee = FollowerFollowee()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FollowerFolloweeRecord> = FollowerFolloweeRecord::class.java

    /**
     * The column <code>simple_journal_entry_db.follower_followee.id</code>.
     */
    val ID: TableField<FollowerFolloweeRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column
     * <code>simple_journal_entry_db.follower_followee.follower_id</code>.
     */
    val FOLLOWER_ID: TableField<FollowerFolloweeRecord, Long?> = createField(DSL.name("follower_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>simple_journal_entry_db.follower_followee.followee_id</code>.
     */
    val FOLLOWEE_ID: TableField<FollowerFolloweeRecord, Long?> = createField(DSL.name("followee_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<FollowerFolloweeRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<FollowerFolloweeRecord>?, parameters: Array<Field<*>?>?) : this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>simple_journal_entry_db.follower_followee</code>
     * table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>simple_journal_entry_db.follower_followee</code>
     * table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>simple_journal_entry_db.follower_followee</code> table
     * reference
     */
    constructor() : this(DSL.name("follower_followee"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, FollowerFolloweeRecord>) : this(Internal.createPathAlias(child, key), child, key, FOLLOWER_FOLLOWEE, null)
    override fun getSchema(): Schema? = if (aliased()) null else SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB
    override fun getIdentity(): Identity<FollowerFolloweeRecord, Long?> = super.getIdentity() as Identity<FollowerFolloweeRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<FollowerFolloweeRecord> = KEY_FOLLOWER_FOLLOWEE_PRIMARY
    override fun getUniqueKeys(): List<UniqueKey<FollowerFolloweeRecord>> = listOf(KEY_FOLLOWER_FOLLOWEE_FOLLOWER_FOLLOWEE_ID_UINDEX)
    override fun getReferences(): List<ForeignKey<FollowerFolloweeRecord, *>> = listOf(FOLLOWER_ACCOUNTS_ID_FK, FOLLOWEE_ACCOUNTS_ID_FK)

    private lateinit var _followerAccountsIdFk: Accounts
    private lateinit var _followeeAccountsIdFk: Accounts
    fun followerAccountsIdFk(): Accounts {
        if (!this::_followerAccountsIdFk.isInitialized)
            _followerAccountsIdFk = Accounts(this, FOLLOWER_ACCOUNTS_ID_FK)

        return _followerAccountsIdFk
    }
    fun followeeAccountsIdFk(): Accounts {
        if (!this::_followeeAccountsIdFk.isInitialized)
            _followeeAccountsIdFk = Accounts(this, FOLLOWEE_ACCOUNTS_ID_FK)

        return _followeeAccountsIdFk
    }
    override fun `as`(alias: String): FollowerFollowee = FollowerFollowee(DSL.name(alias), this)
    override fun `as`(alias: Name): FollowerFollowee = FollowerFollowee(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): FollowerFollowee = FollowerFollowee(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): FollowerFollowee = FollowerFollowee(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, Long?, Long?> = super.fieldsRow() as Row3<Long?, Long?, Long?>
}
